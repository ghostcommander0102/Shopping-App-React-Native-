{"ast":null,"code":"'use strict';\n\nvar utils = require(\"./../utils\");\n\nvar settle = require(\"./../core/settle\");\n\nvar buildURL = require(\"./../helpers/buildURL\");\n\nvar parseHeaders = require(\"./../helpers/parseHeaders\");\n\nvar isURLSameOrigin = require(\"./../helpers/isURLSameOrigin\");\n\nvar createError = require(\"../core/createError\");\n\nvar btoa = typeof window !== 'undefined' && window.btoa || require(\"./../helpers/btoa\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type'];\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n\n      request.onprogress = function handleProgress() {};\n\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n    request.timeout = config.timeout;\n\n    request[loadEvent] = function handleLoad() {\n      if (!request || request.readyState !== 4 && !xDomain) {\n        return;\n      }\n\n      if (request.status === 0) {\n        return;\n      }\n\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n      settle(resolve, reject, response);\n      request = null;\n    };\n\n    request.onerror = function handleError() {\n      reject(createError('Network Error', config));\n      request = null;\n    };\n\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));\n      request = null;\n    };\n\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require(\"./../helpers/cookies\");\n\n      var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ? cookies.read(config.xsrfCookieName) : undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          delete requestHeaders[key];\n        } else {\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        if (request.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    if (typeof config.progress === 'function') {\n      if (config.method === 'post' || config.method === 'put') {\n        request.upload.addEventListener('progress', config.progress);\n      } else if (config.method === 'get') {\n        request.addEventListener('progress', config.progress);\n      }\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    request.send(requestData);\n  });\n};","map":{"version":3,"sources":["D:/project/KHK/recipes-app-react-native-v4.3/recipes-app-react-native/node_modules/react-native-axios/lib/adapters/xhr.js"],"names":["utils","require","settle","buildURL","parseHeaders","isURLSameOrigin","createError","btoa","window","module","exports","xhrAdapter","config","Promise","dispatchXhrRequest","resolve","reject","requestData","data","requestHeaders","headers","isFormData","request","XMLHttpRequest","loadEvent","xDomain","process","env","NODE_ENV","XDomainRequest","url","onprogress","handleProgress","ontimeout","handleTimeout","auth","username","password","Authorization","open","method","toUpperCase","params","paramsSerializer","timeout","handleLoad","readyState","status","responseHeaders","getAllResponseHeaders","responseData","responseType","responseText","response","statusText","onerror","handleError","isStandardBrowserEnv","cookies","xsrfValue","withCredentials","read","xsrfCookieName","undefined","xsrfHeaderName","forEach","setRequestHeader","val","key","toLowerCase","e","progress","upload","addEventListener","send"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,cAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,oBAApB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,yBAAtB;;AACA,IAAIG,YAAY,GAAGH,OAAO,6BAA1B;;AACA,IAAII,eAAe,GAAGJ,OAAO,gCAA7B;;AACA,IAAIK,WAAW,GAAGL,OAAO,uBAAzB;;AACA,IAAIM,IAAI,GAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACD,IAAzC,IAAkDN,OAAO,qBAApE;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAC3C,SAAO,IAAIC,OAAJ,CAAY,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,MAArC,EAA6C;AAC9D,QAAIC,WAAW,GAAGL,MAAM,CAACM,IAAzB;AACA,QAAIC,cAAc,GAAGP,MAAM,CAACQ,OAA5B;;AAEA,QAAIpB,KAAK,CAACqB,UAAN,CAAiBJ,WAAjB,CAAJ,EAAmC;AACjC,aAAOE,cAAc,CAAC,cAAD,CAArB;AACD;;AAED,QAAIG,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACA,QAAIC,SAAS,GAAG,oBAAhB;AACA,QAAIC,OAAO,GAAG,KAAd;;AAKA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,IACA,OAAOpB,MAAP,KAAkB,WADlB,IAEAA,MAAM,CAACqB,cAFP,IAEyB,EAAE,qBAAqBP,OAAvB,CAFzB,IAGA,CAACjB,eAAe,CAACO,MAAM,CAACkB,GAAR,CAHpB,EAGkC;AAChCR,MAAAA,OAAO,GAAG,IAAId,MAAM,CAACqB,cAAX,EAAV;AACAL,MAAAA,SAAS,GAAG,QAAZ;AACAC,MAAAA,OAAO,GAAG,IAAV;;AACAH,MAAAA,OAAO,CAACS,UAAR,GAAqB,SAASC,cAAT,GAA0B,CAAE,CAAjD;;AACAV,MAAAA,OAAO,CAACW,SAAR,GAAoB,SAASC,aAAT,GAAyB,CAAE,CAA/C;AACD;;AAGD,QAAItB,MAAM,CAACuB,IAAX,EAAiB;AACf,UAAIC,QAAQ,GAAGxB,MAAM,CAACuB,IAAP,CAAYC,QAAZ,IAAwB,EAAvC;AACA,UAAIC,QAAQ,GAAGzB,MAAM,CAACuB,IAAP,CAAYE,QAAZ,IAAwB,EAAvC;AACAlB,MAAAA,cAAc,CAACmB,aAAf,GAA+B,WAAW/B,IAAI,CAAC6B,QAAQ,GAAG,GAAX,GAAiBC,QAAlB,CAA9C;AACD;;AAEDf,IAAAA,OAAO,CAACiB,IAAR,CAAa3B,MAAM,CAAC4B,MAAP,CAAcC,WAAd,EAAb,EAA0CtC,QAAQ,CAACS,MAAM,CAACkB,GAAR,EAAalB,MAAM,CAAC8B,MAApB,EAA4B9B,MAAM,CAAC+B,gBAAnC,CAAlD,EAAwG,IAAxG;AAGArB,IAAAA,OAAO,CAACsB,OAAR,GAAkBhC,MAAM,CAACgC,OAAzB;;AAGAtB,IAAAA,OAAO,CAACE,SAAD,CAAP,GAAqB,SAASqB,UAAT,GAAsB;AACzC,UAAI,CAACvB,OAAD,IAAaA,OAAO,CAACwB,UAAR,KAAuB,CAAvB,IAA4B,CAACrB,OAA9C,EAAwD;AACtD;AACD;;AAID,UAAIH,OAAO,CAACyB,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AAGD,UAAIC,eAAe,GAAG,2BAA2B1B,OAA3B,GAAqClB,YAAY,CAACkB,OAAO,CAAC2B,qBAAR,EAAD,CAAjD,GAAqF,IAA3G;AACA,UAAIC,YAAY,GAAG,CAACtC,MAAM,CAACuC,YAAR,IAAwBvC,MAAM,CAACuC,YAAP,KAAwB,MAAhD,GAAyD7B,OAAO,CAAC8B,YAAjE,GAAgF9B,OAAO,CAAC+B,QAA3G;AACA,UAAIA,QAAQ,GAAG;AACbnC,QAAAA,IAAI,EAAEgC,YADO;AAGbH,QAAAA,MAAM,EAAEzB,OAAO,CAACyB,MAAR,KAAmB,IAAnB,GAA0B,GAA1B,GAAgCzB,OAAO,CAACyB,MAHnC;AAIbO,QAAAA,UAAU,EAAEhC,OAAO,CAACyB,MAAR,KAAmB,IAAnB,GAA0B,YAA1B,GAAyCzB,OAAO,CAACgC,UAJhD;AAKblC,QAAAA,OAAO,EAAE4B,eALI;AAMbpC,QAAAA,MAAM,EAAEA,MANK;AAObU,QAAAA,OAAO,EAAEA;AAPI,OAAf;AAUApB,MAAAA,MAAM,CAACa,OAAD,EAAUC,MAAV,EAAkBqC,QAAlB,CAAN;AAGA/B,MAAAA,OAAO,GAAG,IAAV;AACD,KA5BD;;AA+BAA,IAAAA,OAAO,CAACiC,OAAR,GAAkB,SAASC,WAAT,GAAuB;AAGvCxC,MAAAA,MAAM,CAACV,WAAW,CAAC,eAAD,EAAkBM,MAAlB,CAAZ,CAAN;AAGAU,MAAAA,OAAO,GAAG,IAAV;AACD,KAPD;;AAUAA,IAAAA,OAAO,CAACW,SAAR,GAAoB,SAASC,aAAT,GAAyB;AAC3ClB,MAAAA,MAAM,CAACV,WAAW,CAAC,gBAAgBM,MAAM,CAACgC,OAAvB,GAAiC,aAAlC,EAAiDhC,MAAjD,EAAyD,cAAzD,CAAZ,CAAN;AAGAU,MAAAA,OAAO,GAAG,IAAV;AACD,KALD;;AAUA,QAAItB,KAAK,CAACyD,oBAAN,EAAJ,EAAkC;AAChC,UAAIC,OAAO,GAAGzD,OAAO,wBAArB;;AAGA,UAAI0D,SAAS,GAAG/C,MAAM,CAACgD,eAAP,IAA0BvD,eAAe,CAACO,MAAM,CAACkB,GAAR,CAAzC,GACZ4B,OAAO,CAACG,IAAR,CAAajD,MAAM,CAACkD,cAApB,CADY,GAEZC,SAFJ;;AAIA,UAAIJ,SAAJ,EAAe;AACbxC,QAAAA,cAAc,CAACP,MAAM,CAACoD,cAAR,CAAd,GAAwCL,SAAxC;AACD;AACF;;AAGD,QAAI,sBAAsBrC,OAA1B,EAAmC;AACjCtB,MAAAA,KAAK,CAACiE,OAAN,CAAc9C,cAAd,EAA8B,SAAS+C,gBAAT,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AAChE,YAAI,OAAOnD,WAAP,KAAuB,WAAvB,IAAsCmD,GAAG,CAACC,WAAJ,OAAsB,cAAhE,EAAgF;AAE9E,iBAAOlD,cAAc,CAACiD,GAAD,CAArB;AACD,SAHD,MAGO;AAEL9C,UAAAA,OAAO,CAAC4C,gBAAR,CAAyBE,GAAzB,EAA8BD,GAA9B;AACD;AACF,OARD;AASD;;AAGD,QAAIvD,MAAM,CAACgD,eAAX,EAA4B;AAC1BtC,MAAAA,OAAO,CAACsC,eAAR,GAA0B,IAA1B;AACD;;AAGD,QAAIhD,MAAM,CAACuC,YAAX,EAAyB;AACvB,UAAI;AACF7B,QAAAA,OAAO,CAAC6B,YAAR,GAAuBvC,MAAM,CAACuC,YAA9B;AACD,OAFD,CAEE,OAAOmB,CAAP,EAAU;AACV,YAAIhD,OAAO,CAAC6B,YAAR,KAAyB,MAA7B,EAAqC;AACnC,gBAAMmB,CAAN;AACD;AACF;AACF;;AAGD,QAAI,OAAO1D,MAAM,CAAC2D,QAAd,KAA2B,UAA/B,EAA2C;AACzC,UAAI3D,MAAM,CAAC4B,MAAP,KAAkB,MAAlB,IAA4B5B,MAAM,CAAC4B,MAAP,KAAkB,KAAlD,EAAyD;AACvDlB,QAAAA,OAAO,CAACkD,MAAR,CAAeC,gBAAf,CAAgC,UAAhC,EAA4C7D,MAAM,CAAC2D,QAAnD;AACD,OAFD,MAEO,IAAI3D,MAAM,CAAC4B,MAAP,KAAkB,KAAtB,EAA6B;AAClClB,QAAAA,OAAO,CAACmD,gBAAR,CAAyB,UAAzB,EAAqC7D,MAAM,CAAC2D,QAA5C;AACD;AACF;;AAED,QAAItD,WAAW,KAAK8C,SAApB,EAA+B;AAC7B9C,MAAAA,WAAW,GAAG,IAAd;AACD;;AAGDK,IAAAA,OAAO,CAACoD,IAAR,CAAazD,WAAb;AACD,GAnJM,CAAP;AAoJD,CArJD","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar btoa = (typeof window !== 'undefined' && window.btoa) || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      if (request.status === 0) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        if (request.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.progress === 'function') {\n      if (config.method === 'post' || config.method === 'put') {\n        request.upload.addEventListener('progress', config.progress);\n      } else if (config.method === 'get') {\n        request.addEventListener('progress', config.progress);\n      }\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}