{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\project\\\\KHK\\\\recipes-app-react-native-v4.3\\\\recipes-app-react-native\\\\node_modules\\\\react-native-final-tree-view\\\\index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport get from 'lodash.get';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\n\nfunction noop() {}\n\nvar TreeView = function (_React$Component) {\n  _inherits(TreeView, _React$Component);\n\n  var _super = _createSuper(TreeView);\n\n  function TreeView(props) {\n    var _this;\n\n    _classCallCheck(this, TreeView);\n\n    _this = _super.call(this, props);\n\n    _this.getInitialState = function () {\n      return {\n        expandedNodeKeys: {}\n      };\n    };\n\n    _this.hasChildrenNodes = function (node) {\n      return get(node, _this.props.childrenKey + \".length\", 0) > 0;\n    };\n\n    _this.isExpanded = function (id) {\n      if (_this.props.isNodeExpanded !== noop) {\n        return _this.props.isNodeExpanded(id);\n      } else {\n        return get(_this.state.expandedNodeKeys, id, _this.props.initialExpanded);\n      }\n    };\n\n    _this.updateNodeKeyById = function (id, expanded) {\n      return function (_ref) {\n        var expandedNodeKeys = _ref.expandedNodeKeys;\n        return {\n          expandedNodeKeys: _extends({}, expandedNodeKeys, _defineProperty({}, id, expanded))\n        };\n      };\n    };\n\n    _this.collapseNode = function (id) {\n      return _this.setState(_this.updateNodeKeyById(id, false));\n    };\n\n    _this.expandNode = function (id) {\n      return _this.setState(_this.updateNodeKeyById(id, true));\n    };\n\n    _this.toggleCollapse = function (id) {\n      var method = _this.isExpanded(id) ? 'collapseNode' : 'expandNode';\n\n      _this[method](id);\n    };\n\n    _this.handleNodePressed = function _callee(_ref2) {\n      var node, level, nodePressResult;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              node = _ref2.node, level = _ref2.level;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_this.props.onNodePress({\n                node: node,\n                level: level\n              }));\n\n            case 3:\n              nodePressResult = _context.sent;\n\n              if (nodePressResult !== false && _this.hasChildrenNodes(node)) {\n                _this.toggleCollapse(node[_this.props.idKey]);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.Node = function (_ref3) {\n      var nodes = _ref3.nodes,\n          level = _ref3.level;\n      var NodeComponent = _this.Node;\n      return nodes.map(function (node) {\n        var _this$props$getCollap;\n\n        var isExpanded = _this.isExpanded(node[_this.props.idKey]);\n\n        var hasChildrenNodes = _this.hasChildrenNodes(node);\n\n        var shouldRenderLevel = hasChildrenNodes && isExpanded;\n        return React.createElement(View, {\n          key: node[_this.props.idKey],\n          style: {\n            height: isExpanded ? 'auto' : _this.props.getCollapsedNodeHeight((_this$props$getCollap = {}, _defineProperty(_this$props$getCollap, _this.props.idKey, node[_this.props.idKey]), _defineProperty(_this$props$getCollap, \"level\", level), _this$props$getCollap)),\n            zIndex: 1,\n            overflow: 'hidden'\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }\n        }, React.createElement(TouchableOpacity, {\n          activeOpacity: _this.props.activeOpacityNode,\n          disabled: _this.props.shouldDisableTouchOnLeaf({\n            node: node,\n            level: level\n          }),\n          onPress: function onPress() {\n            return _this.handleNodePressed({\n              node: node,\n              level: level\n            });\n          },\n          onLongPress: function onLongPress() {\n            return _this.props.onNodeLongPress({\n              node: node,\n              level: level\n            });\n          },\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }\n        }, React.createElement(_this.props.renderNode, {\n          node: node,\n          level: level,\n          isExpanded: isExpanded,\n          hasChildrenNodes: hasChildrenNodes\n        })), shouldRenderLevel && React.createElement(NodeComponent, {\n          nodes: node[_this.props.childrenKey],\n          level: level + 1,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }\n        }));\n      });\n    };\n\n    _this.state = _this.getInitialState();\n    return _this;\n  }\n\n  _createClass(TreeView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var hasDataUpdated = prevProps.data !== this.props.data;\n      var hasIdKeyUpdated = prevProps.idKey !== this.props.idKey;\n      var childrenKeyUpdated = prevProps.childrenKey !== this.props.childrenKey;\n\n      if (hasDataUpdated || hasIdKeyUpdated || childrenKeyUpdated) {\n        this.setState(this.getInitialState());\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(this.Node, {\n        nodes: this.props.data,\n        level: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return TreeView;\n}(React.Component);\n\nTreeView.propTypes = {\n  data: PropTypes.array.isRequired,\n  renderNode: PropTypes.func.isRequired,\n  initialExpanded: PropTypes.bool,\n  getCollapsedNodeHeight: PropTypes.func,\n  idKey: PropTypes.string,\n  activeOpacityNode: PropTypes.number,\n  childrenKey: PropTypes.string,\n  onNodePress: PropTypes.func,\n  onNodeLongPress: PropTypes.func,\n  isNodeExpanded: PropTypes.func,\n  shouldDisableTouchOnLeaf: PropTypes.func\n};\nTreeView.defaultProps = {\n  initialExpanded: false,\n  getCollapsedNodeHeight: function getCollapsedNodeHeight() {\n    return 20;\n  },\n  idKey: 'id',\n  childrenKey: 'children',\n  activeOpacityNode: .2,\n  onNodePress: noop,\n  onNodeLongPress: noop,\n  isNodeExpanded: noop,\n  shouldDisableTouchOnLeaf: function shouldDisableTouchOnLeaf() {\n    return false;\n  }\n};\nexport default TreeView;","map":{"version":3,"sources":["D:/project/KHK/recipes-app-react-native-v4.3/recipes-app-react-native/node_modules/react-native-final-tree-view/index.js"],"names":["get","PropTypes","React","noop","TreeView","props","getInitialState","expandedNodeKeys","hasChildrenNodes","node","childrenKey","isExpanded","id","isNodeExpanded","state","initialExpanded","updateNodeKeyById","expanded","collapseNode","setState","expandNode","toggleCollapse","method","handleNodePressed","level","onNodePress","nodePressResult","idKey","Node","nodes","NodeComponent","map","shouldRenderLevel","height","getCollapsedNodeHeight","zIndex","overflow","activeOpacityNode","shouldDisableTouchOnLeaf","onNodeLongPress","createElement","renderNode","prevProps","hasDataUpdated","data","hasIdKeyUpdated","childrenKeyUpdated","Component","propTypes","array","isRequired","func","bool","string","number","defaultProps"],"mappings":"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","sourcesContent":["import get from 'lodash.get'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { TouchableOpacity, View } from 'react-native'\n\nfunction noop() {}\n\nclass TreeView extends React.Component {\n  static propTypes = {\n    data: PropTypes.array.isRequired,\n    renderNode: PropTypes.func.isRequired,\n    initialExpanded: PropTypes.bool,\n    getCollapsedNodeHeight: PropTypes.func,\n    idKey: PropTypes.string,\n    activeOpacityNode: PropTypes.number,\n    childrenKey: PropTypes.string,\n    onNodePress: PropTypes.func,\n    onNodeLongPress: PropTypes.func,\n    isNodeExpanded: PropTypes.func,\n    shouldDisableTouchOnLeaf: PropTypes.func\n  }\n\n  static defaultProps = {\n    initialExpanded: false,\n    getCollapsedNodeHeight: () => 20,\n    idKey: 'id',\n    childrenKey: 'children',\n    activeOpacityNode: .2,\n    onNodePress: noop,\n    onNodeLongPress: noop,\n    isNodeExpanded: noop,\n    shouldDisableTouchOnLeaf: () => false\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = this.getInitialState()\n  }\n\n  getInitialState = () => ({\n    expandedNodeKeys: {},\n  })\n\n  componentDidUpdate(prevProps) {\n    const hasDataUpdated = prevProps.data !== this.props.data\n    const hasIdKeyUpdated = prevProps.idKey !== this.props.idKey\n    const childrenKeyUpdated = prevProps.childrenKey !== this.props.childrenKey\n\n    if (hasDataUpdated || hasIdKeyUpdated || childrenKeyUpdated) {\n      this.setState(this.getInitialState())\n    }\n  }\n\n  hasChildrenNodes = (node) =>\n    get(node, `${this.props.childrenKey}.length`, 0) > 0\n\n  isExpanded = (id) => {\n    if (this.props.isNodeExpanded !== noop) {\n      return this.props.isNodeExpanded(id)\n    } else {\n      return get(this.state.expandedNodeKeys, id, this.props.initialExpanded)\n    }\n  }\n\n  updateNodeKeyById = (id, expanded) => ({ expandedNodeKeys }) => ({\n    expandedNodeKeys: Object.assign({}, expandedNodeKeys, {\n      [id]: expanded,\n    }),\n  })\n\n  collapseNode = (id) => this.setState(this.updateNodeKeyById(id, false))\n\n  expandNode = (id) => this.setState(this.updateNodeKeyById(id, true))\n\n  toggleCollapse = (id) => {\n    const method = this.isExpanded(id) ? 'collapseNode' : 'expandNode'\n\n    this[method](id)\n  }\n\n  handleNodePressed = async ({ node, level }) => {\n    const nodePressResult = await this.props.onNodePress({ node, level })\n\n    if (nodePressResult !== false && this.hasChildrenNodes(node)) {\n      this.toggleCollapse(node[this.props.idKey])\n    }\n  }\n\n  Node = ({ nodes, level }) => {\n    const NodeComponent = this.Node\n\n    return nodes.map((node) => {\n      const isExpanded = this.isExpanded(node[this.props.idKey])\n      const hasChildrenNodes = this.hasChildrenNodes(node)\n      const shouldRenderLevel = hasChildrenNodes && isExpanded\n\n      return (\n        <View\n          key={node[this.props.idKey]}\n          style={{\n            height: isExpanded\n              ? 'auto'\n              : this.props.getCollapsedNodeHeight({\n                  [this.props.idKey]: node[this.props.idKey],\n                  level,\n                }),\n            zIndex: 1,\n            overflow: 'hidden',\n          }}\n        >\n          <TouchableOpacity\n            activeOpacity={this.props.activeOpacityNode}\n            disabled={this.props.shouldDisableTouchOnLeaf({ node, level })}\n            onPress={() => this.handleNodePressed({ node, level })}\n            onLongPress={() => this.props.onNodeLongPress({ node, level })}\n          >\n            {React.createElement(this.props.renderNode, {\n              node,\n              level,\n              isExpanded,\n              hasChildrenNodes,\n            })}\n          </TouchableOpacity>\n          {shouldRenderLevel && (\n            <NodeComponent\n              nodes={node[this.props.childrenKey]}\n              level={level + 1}\n            />\n          )}\n        </View>\n      )\n    })\n  }\n\n  render() {\n    return <this.Node nodes={this.props.data} level={0} />\n  }\n}\n\nexport default TreeView\n"]},"metadata":{},"sourceType":"module"}