{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { GETCATEGORIES_URL } from \"../utils/api\";\nimport { GET_CATEGORIES, CLEAR_CATEGORY, CATEGORY_ERROR, SET_CATEGORY } from \"./types\";\nexport var getCategories = function getCategories(formData) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: CLEAR_CATEGORY\n            });\n            _context.prev = 1;\n            return _context.abrupt(\"return\", fetch(GETCATEGORIES_URL, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                \"x-auth-token\": formData.token\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              if (json.hasOwnProperty('error')) {} else {\n                dispatch({\n                  type: GET_CATEGORIES,\n                  payload: json\n                });\n              }\n            }).catch(function (error) {\n              dispatch({\n                type: CATEGORY_ERROR\n              });\n            }));\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch({\n              type: CATEGORY_ERROR,\n              payload: {\n                msg: _context.t0.response.statusText,\n                status: _context.t0.response.status\n              }\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 5]], Promise);\n  };\n};\nexport var setCategory = function setCategory(formData) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: SET_CATEGORY,\n              payload: formData.category\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/project/KHK/recipes-app-react-native-v4.3/recipes-app-react-native/src/actions/categories.js"],"names":["GETCATEGORIES_URL","GET_CATEGORIES","CLEAR_CATEGORY","CATEGORY_ERROR","SET_CATEGORY","getCategories","formData","dispatch","type","fetch","method","headers","token","then","response","json","hasOwnProperty","payload","catch","error","msg","statusText","status","setCategory","category"],"mappings":";AAAA,SAASA,iBAAT;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,YAAzD;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD;AAAA,SAAc,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACvCA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEN;AAAR,aAAD,CAAR;AADuC;AAAA,6CAI5BO,KAAK,CAACT,iBAAD,EAAoB;AACrCU,cAAAA,MAAM,EAAE,KAD6B;AAErCC,cAAAA,OAAO,EAAE;AACR,gCAAiB,kBADT;AAER,gCAAgBL,QAAQ,CAACM;AAFjB;AAF4B,aAApB,CAAL,CAOZC,IAPY,CAOP,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aAPD,EAQNF,IARM,CAQD,UAAAE,IAAI,EAAI;AACV,kBAAGA,IAAI,CAACC,cAAL,CAAoB,OAApB,CAAH,EAAgC,CACxC,CADQ,MAEK;AACDT,gBAAAA,QAAQ,CAAC;AACLC,kBAAAA,IAAI,EAAEP,cADD;AAELgB,kBAAAA,OAAO,EAAEF;AAFJ,iBAAD,CAAR;AAIZ;AACK,aAjBM,EAkBNG,KAlBM,CAkBA,UAACC,KAAD,EAAW;AACdZ,cAAAA,QAAQ,CAAC;AACjBC,gBAAAA,IAAI,EAAEL;AADW,eAAD,CAAR;AAGH,aAtBM,CAJ4B;;AAAA;AAAA;AAAA;AA4BnCI,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEL,cADD;AAELc,cAAAA,OAAO,EAAE;AAAEG,gBAAAA,GAAG,EAAE,YAAIN,QAAJ,CAAaO,UAApB;AAAgCC,gBAAAA,MAAM,EAAE,YAAIR,QAAJ,CAAaQ;AAArD;AAFJ,aAAD,CAAR;;AA5BmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAAtB;AAmCP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACjB,QAAD;AAAA,SAAc,kBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACrCA,YAAAA,QAAQ,CAAC;AACLC,cAAAA,IAAI,EAAEJ,YADD;AAELa,cAAAA,OAAO,EAAEX,QAAQ,CAACkB;AAFb,aAAD,CAAR;;AADqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAApB","sourcesContent":["import { GETCATEGORIES_URL } from \"../utils/api\";\r\nimport { GET_CATEGORIES, CLEAR_CATEGORY, CATEGORY_ERROR, SET_CATEGORY } from \"./types\";\r\n\r\nexport const getCategories = (formData) => async (dispatch) => {\r\n    dispatch({ type: CLEAR_CATEGORY });\r\n\r\n    try {\r\n        return fetch(GETCATEGORIES_URL, {\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type' : 'application/json',\r\n\t\t\t\t\"x-auth-token\": formData.token\r\n\t\t\t}\r\n\t\t})\r\n\t\t.then(response => response.json())\r\n        .then(json => {\r\n            if(json.hasOwnProperty('error')){\r\n\t\t\t}\r\n            else {\r\n                dispatch({\r\n                    type: GET_CATEGORIES,\r\n                    payload: json\r\n                });\r\n\t\t\t}\r\n        })\r\n        .catch((error) => {\r\n            dispatch({\r\n\t\t\t\ttype: CATEGORY_ERROR\r\n\t\t\t});\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type: CATEGORY_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n};\r\n\r\nexport const setCategory = (formData) => async(dispatch) => {\r\n    dispatch({\r\n        type: SET_CATEGORY,\r\n        payload: formData.category\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}