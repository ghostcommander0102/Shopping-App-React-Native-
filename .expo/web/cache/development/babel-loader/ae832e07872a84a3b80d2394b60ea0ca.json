{"ast":null,"code":"'use strict';\n\nvar utils = require(\"./../utils\");\n\nvar transformData = require(\"./transformData\");\n\nmodule.exports = function dispatchRequest(config) {\n  config.headers = config.headers || {};\n  config.data = transformData(config.data, config.headers, config.transformRequest);\n  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});\n  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {\n    delete config.headers[method];\n  });\n  var adapter;\n\n  if (typeof config.adapter === 'function') {\n    adapter = config.adapter;\n  } else if (typeof fetch !== 'undefined' && Object.prototype.toString.call(fetch) === '[object Function]') {\n    adapter = require(\"../adapters/fetch\");\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    adapter = require(\"../adapters/xhr\");\n  } else if (typeof process !== 'undefined') {\n    adapter = require(\"../adapters/http\");\n  }\n\n  return Promise.resolve(config).then(adapter).then(function onFulfilled(response) {\n    response.data = transformData(response.data, response.headers, config.transformResponse);\n    return response;\n  }, function onRejected(error) {\n    if (error && error.response) {\n      error.response.data = transformData(error.response.data, error.response.headers, config.transformResponse);\n    }\n\n    return Promise.reject(error);\n  });\n};","map":{"version":3,"sources":["D:/project/KHK/recipes-app-react-native-v4.3/recipes-app-react-native/node_modules/react-native-axios/lib/core/dispatchRequest.js"],"names":["utils","require","transformData","module","exports","dispatchRequest","config","headers","data","transformRequest","merge","common","method","forEach","cleanHeaderConfig","adapter","fetch","Object","prototype","toString","call","XMLHttpRequest","process","Promise","resolve","then","onFulfilled","response","transformResponse","onRejected","error","reject"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,cAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,mBAA3B;;AASAE,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAEhDA,EAAAA,MAAM,CAACC,OAAP,GAAiBD,MAAM,CAACC,OAAP,IAAkB,EAAnC;AAGAD,EAAAA,MAAM,CAACE,IAAP,GAAcN,aAAa,CACzBI,MAAM,CAACE,IADkB,EAEzBF,MAAM,CAACC,OAFkB,EAGzBD,MAAM,CAACG,gBAHkB,CAA3B;AAOAH,EAAAA,MAAM,CAACC,OAAP,GAAiBP,KAAK,CAACU,KAAN,CACfJ,MAAM,CAACC,OAAP,CAAeI,MAAf,IAAyB,EADV,EAEfL,MAAM,CAACC,OAAP,CAAeD,MAAM,CAACM,MAAtB,KAAiC,EAFlB,EAGfN,MAAM,CAACC,OAAP,IAAkB,EAHH,CAAjB;AAMAP,EAAAA,KAAK,CAACa,OAAN,CACE,CAAC,QAAD,EAAW,KAAX,EAAkB,MAAlB,EAA0B,MAA1B,EAAkC,KAAlC,EAAyC,OAAzC,EAAkD,QAAlD,CADF,EAEE,SAASC,iBAAT,CAA2BF,MAA3B,EAAmC;AACjC,WAAON,MAAM,CAACC,OAAP,CAAeK,MAAf,CAAP;AACD,GAJH;AAOA,MAAIG,OAAJ;;AAEA,MAAI,OAAOT,MAAM,CAACS,OAAd,KAA0B,UAA9B,EAA0C;AAExCA,IAAAA,OAAO,GAAGT,MAAM,CAACS,OAAjB;AACD,GAHD,MAGO,IAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgCC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,mBAA9E,EAAmG;AAExGD,IAAAA,OAAO,GAAGd,OAAO,qBAAjB;AACD,GAHM,MAGA,IAAI,OAAOoB,cAAP,KAA0B,WAA9B,EAA2C;AAEhDN,IAAAA,OAAO,GAAGd,OAAO,mBAAjB;AACD,GAHM,MAGA,IAAI,OAAOqB,OAAP,KAAmB,WAAvB,EAAoC;AAEzCP,IAAAA,OAAO,GAAGd,OAAO,oBAAjB;AACD;;AAED,SAAOsB,OAAO,CAACC,OAAR,CAAgBlB,MAAhB,EAEJmB,IAFI,CAECV,OAFD,EAGJU,IAHI,CAGC,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAEnCA,IAAAA,QAAQ,CAACnB,IAAT,GAAgBN,aAAa,CAC3ByB,QAAQ,CAACnB,IADkB,EAE3BmB,QAAQ,CAACpB,OAFkB,EAG3BD,MAAM,CAACsB,iBAHoB,CAA7B;AAMA,WAAOD,QAAP;AACD,GAZI,EAYF,SAASE,UAAT,CAAoBC,KAApB,EAA2B;AAE5B,QAAIA,KAAK,IAAIA,KAAK,CAACH,QAAnB,EAA6B;AAC3BG,MAAAA,KAAK,CAACH,QAAN,CAAenB,IAAf,GAAsBN,aAAa,CACjC4B,KAAK,CAACH,QAAN,CAAenB,IADkB,EAEjCsB,KAAK,CAACH,QAAN,CAAepB,OAFkB,EAGjCD,MAAM,CAACsB,iBAH0B,CAAnC;AAKD;;AAED,WAAOL,OAAO,CAACQ,MAAR,CAAeD,KAAf,CAAP;AACD,GAvBI,CAAP;AAwBD,CAjED","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\n\n/**\n * Dispatch a request to the server using whichever adapter\n * is supported by the current environment.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter;\n\n  if (typeof config.adapter === 'function') {\n    // For custom adapter support\n    adapter = config.adapter;\n  } else if (typeof fetch !== 'undefined' && Object.prototype.toString.call(fetch) === '[object Function]') {\n    // Use new Fetch API\n    adapter = require('../adapters/fetch');\n  } else if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('../adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('../adapters/http');\n  }\n\n  return Promise.resolve(config)\n    // Wrap synchronous adapter errors and pass configuration\n    .then(adapter)\n    .then(function onFulfilled(response) {\n      // Transform response data\n      response.data = transformData(\n        response.data,\n        response.headers,\n        config.transformResponse\n      );\n\n      return response;\n    }, function onRejected(error) {\n      // Transform response data\n      if (error && error.response) {\n        error.response.data = transformData(\n          error.response.data,\n          error.response.headers,\n          config.transformResponse\n        );\n      }\n\n      return Promise.reject(error);\n    });\n};\n"]},"metadata":{},"sourceType":"script"}