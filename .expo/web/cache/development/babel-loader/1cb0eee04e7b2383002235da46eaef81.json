{"ast":null,"code":"'use strict';\n\nvar settle = require(\"./../core/settle\");\n\nvar utils = require(\"./../utils\");\n\nvar buildURL = require(\"./../helpers/buildURL\");\n\nvar btoa = typeof window !== 'undefined' && window.btoa || require(\"./../helpers/btoa\");\n\nmodule.exports = function fetchAdapter(config) {\n  return new Promise(function handleRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var method = config.method.toUpperCase() || 'GET';\n    var headers = new Headers();\n    utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n        delete requestHeaders[key];\n      } else {\n        headers.append(key, val);\n      }\n    });\n\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      headers.append('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    var url = buildURL(config.url, config.params, config.paramsSerializer);\n    var init = {\n      method: method,\n      headers: headers,\n      body: requestData\n    };\n    var request = new Request(url, init);\n    fetch(request).then(function handleResponse(response) {\n      var contentType = response.headers.get('Content-Type');\n      var reg = /^application\\/json[;]?\\.*/;\n      var responsePromise;\n\n      if (reg.test(contentType)) {\n        responsePromise = response.json();\n      } else {\n        responsePromise = response.text();\n      }\n\n      responsePromise.then(function responseData(d) {\n        var res = {\n          data: d,\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n          config: config,\n          request: request\n        };\n        settle(resolve, reject, res);\n      });\n    });\n  });\n};","map":{"version":3,"sources":["D:/project/KHK/recipes-app-react-native-v4.3/recipes-app-react-native/node_modules/react-native-axios/lib/adapters/fetch.js"],"names":["settle","require","utils","buildURL","btoa","window","module","exports","fetchAdapter","config","Promise","handleRequest","resolve","reject","requestData","data","requestHeaders","headers","method","toUpperCase","Headers","forEach","setRequestHeader","val","key","toLowerCase","append","auth","username","password","url","params","paramsSerializer","init","body","request","Request","fetch","then","handleResponse","response","contentType","get","reg","responsePromise","test","json","text","responseData","d","res","status","statusText"],"mappings":"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","sourcesContent":["'use strict';\n\nvar settle = require('./../core/settle');\nvar utils = require('./../utils');\nvar buildURL = require('./../helpers/buildURL');\nvar btoa = (typeof window !== 'undefined' && window.btoa) || require('./../helpers/btoa');\n\nmodule.exports = function fetchAdapter(config) {\n  return new Promise(function handleRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    var method = config.method.toUpperCase() || 'GET';\n\n    var headers = new Headers();\n\n    utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n        // Remove Content-Type if data is undefined\n        delete requestHeaders[key];\n      } else {\n        // Otherwise add header to the request\n        headers.append(key, val);\n      }\n    });\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      headers.append('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    var url = buildURL(config.url, config.params, config.paramsSerializer);\n\n    var init = {\n      method: method,\n      headers: headers,\n      body: requestData\n    };\n\n    var request = new Request(url, init);\n\n    fetch(request).then(function handleResponse(response) {\n      var contentType = response.headers.get('Content-Type');\n      var reg = /^application\\/json[;]?\\.*/;\n      var responsePromise;\n      // Json Response\n      if (reg.test(contentType)) {\n        responsePromise = response.json();\n      } else {\n        responsePromise = response.text();\n      }\n      responsePromise.then(function responseData(d) {\n        var res = {\n          data: d,\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n          config: config,\n          request: request\n        };\n        settle(resolve, reject, res);\n      });\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"script"}