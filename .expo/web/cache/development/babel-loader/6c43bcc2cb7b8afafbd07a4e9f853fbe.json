{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { REGISTER_URL, LOADUSER_URL, LOGIN_URL } from \"../utils/api\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from \"./types\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nexport var loadUser = function loadUser(token) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            return _context.abrupt(\"return\", fetch(LOADUSER_URL, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                \"x-auth-token\": token\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              if (json.hasOwnProperty('error')) {\n                dispatch({\n                  type: REGISTER_FAIL\n                });\n              } else {\n                dispatch({\n                  type: USER_LOADED,\n                  payload: json\n                });\n              }\n            }).catch(function (error) {\n              dispatch({\n                type: REGISTER_FAIL\n              });\n            }));\n\n          case 4:\n            _context.prev = 4;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: AUTH_ERROR\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  };\n};\nexport var register = function register(formData) {\n  return function _callee2(dispatch) {\n    var errors;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            return _context2.abrupt(\"return\", fetch(REGISTER_URL, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                name: formData.fullname,\n                phone: formData.phone,\n                email: formData.email,\n                password: formData.password\n              })\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              if (json.hasOwnProperty('error')) {\n                dispatch({\n                  type: REGISTER_FAIL\n                });\n              } else {\n                dispatch({\n                  type: REGISTER_SUCCESS,\n                  payload: json\n                });\n                localStorage.setItem(\"token\", json.token);\n                dispatch(loadUser(json.token));\n              }\n            }).catch(function (error) {\n              dispatch({\n                type: REGISTER_FAIL\n              });\n            }));\n\n          case 4:\n            _context2.prev = 4;\n            _context2.t0 = _context2[\"catch\"](0);\n            errors = _context2.t0.response.data.errors;\n\n            if (errors) {\n              errors.forEach(function (error) {\n                return dispatch(setAlert(error.msg, 'danger'));\n              });\n            }\n\n            dispatch({\n              type: REGISTER_FAIL\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  };\n};\nexport var login = function login(formData) {\n  return function _callee3(dispatch) {\n    var errors;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            return _context3.abrupt(\"return\", fetch(LOGIN_URL, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: formData.email,\n                password: formData.password\n              })\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              if (json.hasOwnProperty('errors')) {\n                dispatch({\n                  type: LOGIN_FAIL\n                });\n              } else {\n                dispatch({\n                  type: LOGIN_SUCCESS,\n                  payload: json\n                });\n                AsyncStorage.setItem(\"token\", json.token);\n                dispatch(loadUser(json.token));\n              }\n            }).catch(function (error) {\n              dispatch({\n                type: LOGIN_FAIL\n              });\n            }));\n\n          case 4:\n            _context3.prev = 4;\n            _context3.t0 = _context3[\"catch\"](0);\n            errors = _context3.t0.response.data.errors;\n\n            if (errors) {\n              errors.forEach(function (error) {\n                return dispatch(setAlert(error.msg, 'danger'));\n              });\n            }\n\n            dispatch({\n              type: LOGIN_FAIL\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  };\n};\nexport var update = function update(formData) {\n  return function _callee4(dispatch) {\n    var errors;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            return _context4.abrupt(\"return\", fetch(REGISTER_URL, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                name: formData.fullname,\n                phone: formData.phone,\n                email: formData.email,\n                password: formData.password\n              })\n            }).then(function (response) {\n              return response.json();\n            }).then(function (json) {\n              if (json.hasOwnProperty('error')) {\n                dispatch({\n                  type: REGISTER_FAIL\n                });\n              } else {\n                dispatch({\n                  type: REGISTER_SUCCESS,\n                  payload: json\n                });\n                AsyncStorage.setItem(\"token\", json.token);\n                dispatch(loadUser(json.token));\n              }\n            }).catch(function (error) {\n              dispatch({\n                type: REGISTER_FAIL\n              });\n            }));\n\n          case 4:\n            _context4.prev = 4;\n            _context4.t0 = _context4[\"catch\"](0);\n            errors = _context4.t0.response.data.errors;\n\n            if (errors) {\n              errors.forEach(function (error) {\n                return dispatch(setAlert(error.msg, 'danger'));\n              });\n            }\n\n            dispatch({\n              type: REGISTER_FAIL\n            });\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  };\n};\nexport var logout = function logout(formData) {\n  return function _callee5(dispatch) {\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            dispatch({\n              type: LOGOUT\n            });\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/project/KHK/recipes-app-react-native-v4.3/recipes-app-react-native/src/actions/auth.js"],"names":["REGISTER_URL","LOADUSER_URL","LOGIN_URL","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","AsyncStorage","loadUser","token","dispatch","fetch","method","headers","then","response","json","hasOwnProperty","type","payload","catch","error","register","formData","body","JSON","stringify","name","fullname","phone","email","password","localStorage","setItem","errors","data","forEach","msg","login","update","logout"],"mappings":"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","sourcesContent":["import { REGISTER_URL, LOADUSER_URL, LOGIN_URL } from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT\n} from './types';\nimport { AsyncStorage } from 'react-native';\n// Load User\nexport const loadUser = (token) => async dispatch => {\n\ttry {\n\t\treturn fetch(LOADUSER_URL, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type' : 'application/json',\n\t\t\t\t\"x-auth-token\": token\n\t\t\t}\n\t\t})\n\t\t.then(response => response.json())\n        .then(json => {\n            if(json.hasOwnProperty('error')){\n                dispatch({\n\t\t\t\t\ttype: REGISTER_FAIL\n\t\t\t\t});\n\t\t\t}\n            else {\n                dispatch({\n\t\t\t\t\ttype: USER_LOADED,\n\t\t\t\t\tpayload: json\n\t\t\t\t});\n\t\t\t}\n        })\n        .catch((error) => {\n            dispatch({\n\t\t\t\ttype: REGISTER_FAIL\n\t\t\t});\n        })\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR\n\t\t});\n\t}\n};\n\n// Register User\nexport const register = formData => async dispatch => {\n\ttry {\n\t\treturn fetch(REGISTER_URL,{\n            method:'POST',\n            headers: {\n                'Content-Type' : 'application/json'\n            },\n\t\t\tbody: JSON.stringify({\n\t\t\t\tname: formData.fullname,\n\t\t\t\tphone: formData.phone,\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n        })\n        .then(response => response.json())\n        .then(json => {\n            if(json.hasOwnProperty('error')){\n                dispatch({\n\t\t\t\t\ttype: REGISTER_FAIL\n\t\t\t\t});\n\t\t\t}\n            else {\n                dispatch({\n\t\t\t\t\ttype: REGISTER_SUCCESS,\n\t\t\t\t\tpayload: json\n\t\t\t\t});\n\t\t\t\tlocalStorage.setItem(\"token\", json.token);\n\t\t\t\tdispatch(loadUser(json.token));\n\t\t\t}\n        })\n        .catch((error) => {\n            dispatch({\n\t\t\t\ttype: REGISTER_FAIL\n\t\t\t});\n        })\n\t\t\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL\n\t\t});\n\t}\n};\n\n// Login User\nexport const login = formData => async dispatch => {\n\n\ttry {\n\t\treturn fetch(LOGIN_URL,{\n            method:'POST',\n            headers: {\n                'Content-Type' : 'application/json'\n            },\n\t\t\tbody: JSON.stringify({\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n        })\n        .then(response => response.json())\n        .then(json => {\n            if(json.hasOwnProperty('errors')){\n                dispatch({\n\t\t\t\t\ttype: LOGIN_FAIL\n\t\t\t\t});\n\t\t\t}\n            else {\n                dispatch({\n\t\t\t\t\ttype: LOGIN_SUCCESS,\n\t\t\t\t\tpayload: json\n\t\t\t\t});\n\t\t\t\tAsyncStorage.setItem(\"token\", json.token);\n\t\t\t\tdispatch(loadUser(json.token));\n\t\t\t}\n        })\n        .catch((error) => {\n            dispatch({\n\t\t\t\ttype: LOGIN_FAIL\n\t\t\t});\n        })\n\n\t\t\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL\n\t\t});\n\t}\n};\n\nexport const update = formData => async dispatch => {\n\ttry {\n\t\treturn fetch(REGISTER_URL,{\n            method:'POST',\n            headers: {\n                'Content-Type' : 'application/json'\n            },\n\t\t\tbody: JSON.stringify({\n\t\t\t\tname: formData.fullname,\n\t\t\t\tphone: formData.phone,\n\t\t\t\temail: formData.email,\n\t\t\t\tpassword: formData.password\n\t\t\t})\n        })\n        .then(response => response.json())\n        .then(json => {\n            if(json.hasOwnProperty('error')){\n                dispatch({\n\t\t\t\t\ttype: REGISTER_FAIL\n\t\t\t\t});\n\t\t\t}\n            else {\n                dispatch({\n\t\t\t\t\ttype: REGISTER_SUCCESS,\n\t\t\t\t\tpayload: json\n\t\t\t\t});\n\t\t\t\tAsyncStorage.setItem(\"token\", json.token);\n\t\t\t\tdispatch(loadUser(json.token));\n\t\t\t}\n        })\n        .catch((error) => {\n            dispatch({\n\t\t\t\ttype: REGISTER_FAIL\n\t\t\t});\n        })\n\t\t\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\n\t\tif (errors) {\n\t\t\terrors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: REGISTER_FAIL\n\t\t});\n\t}\n};\n\n// Logout\nexport const logout = formData => async dispatch => { \n\tdispatch({type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}